version: 2.1
jobs:
    lint-html:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: run html lint
            command: |
                rpm -i tidy-5.4.0-64bit.rpm
                tidy -q -e index.html
            
    lint-docker:
      docker: 
        - image: python:3.7.3-stretch
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |
                # Install hadolint
                pwd
                wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x hadolint
        - run:
            name: run lint
            command: |
                    pwd
                    make lint    
                    
    build-push-docker-image:
      docker:
        - image: circleci/golang:1.15
          auth:
            username: $DOCKERHUB_USER
            password: $DOCKERHUB_PWD  # context / project UI env-var reference
      steps:
        - checkout
        - setup_remote_docker:
            version: 19.03.13
        - run:
            name: build and push docker image
            command: |
                
                # Build image and add a descriptive tag
                docker build --tag=capstone-project-demowebsite .
                
                # List docker images
                docker image ls
                
                # Run our static website
                #docker run -it --rm -d -p 8080:80 --name web capstone-project-demowebsite
                #dockerpath=shikhas/capstone-project-demowebsite
                
                #Login to docker hub
                docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PWD

                docker tag capstone-project-demowebsite shikhas/capstone-project-demowebsite
                docker push shikhas/capstone-project-demowebsite
                
    deploy-to-aws:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["c4:8d:74:26:8f:f8:15:aa:eb:4b:8c:66:2f:fc:ee:d4"]
        - run:
            name: creating cluster using EKS and deploying docker image
            command: |
                #install dependencies
                yum -y install tar gzip
                
                #installing kubectl
                curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
                chmod +x ./kubectl
                mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
                echo "kubectl version..."
                kubectl version --short --client 
                
                #installing eksctl
                curl --silent --location https://github.com/weaveworks/eksctl/releases/download/0.47.0/eksctl_Linux_amd64.tar.gz | tar xz -C /tmp
                mv /tmp/eksctl /usr/local/bin
                echo "eksctl version..."
                eksctl version
                
                #creating cluster
                eksctl create cluster --name capstone-demoweb-cluster1 --region us-east-2 --nodes=2 --instance-type=t2.small --ssh-access --ssh-public-key udapeople --managed
                
                #rollout deployment
                #kubectl set image deployments/capstone-demoweb-cluster1 capstone-demoweb-cluster1=shikhas/capstone-project-demowebsite:latest
                
                #deploy docker image to the cluster
                kubectl apply -f deployment.yml
                
                #view your cluster nodes
                echo "Getting cluster nodes..."
                kubectl get nodes -o wide
                
                #Get pods on cluster
                echo "Getting pods..."
                kubectl get pods --all-namespaces -o wide
                
                #list services
                echo "Getting services..."
                kubectl get services --sort-by=.metadata.name
                
                echo "Getting pods again..."
                kubectl get pods --all-namespaces -o wide
                
                echo "Checking loadbalancer..."
                #kubectl describe service my-elb-service
                
 
                #delete cluster
                #eksctl delete cluster --name capstone-demoweb-cluster --region us-east-2
                
                
   
workflows:
  default:
    jobs:
      - lint-html
      - lint-docker:
          requires: [lint-html]
      - build-push-docker-image:
          requires: [lint-docker]
      - deploy-to-aws:
          requires: [build-push-docker-image]
